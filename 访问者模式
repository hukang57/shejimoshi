public class VisitorTest {
    public static void main(String[] args) {
        //创建结构对象
        ObjectStructure objectStructure = new ObjectStructure();
        //添加可以访问的元素
        ConcreteElements1 concreteElements1 = new ConcreteElements1();
        ConcreteElements2 concreteElements2 = new ConcreteElements2();
        objectStructure.add(concreteElements1);
        objectStructure.add(concreteElements2);
        //创建访问对象
        Visitor visitor = new ConcreteVisitor1();
        //结构对象接受visitor访问者的访问，遍历结构对象中存的所有元素接受访问
        objectStructure.accept(visitor);
    }
}
 
//抽象访问者
interface Visitor{
    //访问哪个元素，元素作为参数
    void visit(ConcreteElements1 elements);
    void visit(ConcreteElements2 elements);
}
 
//抽象元素
interface Elements{
    //接收谁的访问，访问者作为参数传递进来
    void accept(Visitor vistor);
}
 
//具体访问者
class ConcreteVisitor1 implements Visitor{
 
    @Override
    public void visit(ConcreteElements1 elements) {
        System.out.print("具体访问者1访问-》");
        elements.operator1();
    }
 
    @Override
    public void visit(ConcreteElements2 elements) {
        System.out.print("具体访问者1访问-》");
        elements.operator2();
    }
}
 
//具体元素
class ConcreteElements1 implements Elements{
 
    //元素接收访问
    @Override
    public void accept(Visitor visitor) {
        //当前元素接受visitor的访问，调用visitor的访问方法
        visitor.visit(this);
    }
 
    public void operator1(){
        System.out.println("元素1");
    }
}
 
//具体元素
class ConcreteElements2 implements Elements{
 
    //元素接收访问
    @Override
    public void accept(Visitor visitor) {
        //当前元素接受visitor的访问
        visitor.visit(this);
    }
 
    public void operator2(){
        System.out.println("元素2");
    }
}
 
//对象结构
class ObjectStructure{
    //存放有哪些元素可以访问
    List<Elements> list = new ArrayList<Elements>();
 
    //添加元素到集合
    public void add(Elements elements){
        list.add(elements);
    }
 
    //接受访问-接受谁的方法，作为参数传递进来
    public void accept(Visitor visitor){
        Iterator<Elements> iterator = list.iterator();
        while(iterator.hasNext()){
            //让元素接受某个访问者的访问
            iterator.next().accept(visitor);
        }
 
    }
 
}
