public class MementoTest {
    public static void main(String[] args) {
        //创建管理者
        Caretaker caretaker = new Caretaker();
        //创建发起者
        Originator originator = new Originator();
        originator.setState("0");
        //创建备份
        Memento memento = originator.createMemento();
        //备份添加到管理者中
        caretaker.push(memento);
        originator.setState("1");
        //备份添加到管理者中
        caretaker.push(originator.createMemento());
        originator.setState("2");
        System.out.println("当前状态值:"+originator.getState());
        //第一次还原
        originator.restoreMemento(caretaker.pop());
        System.out.println("第一次还原状态值:"+originator.getState());
        //第二次还原
        originator.restoreMemento(caretaker.pop());
        System.out.println("第二次还原状态值:"+originator.getState());
    }
}
 
//备忘录实体-需要记录发起人存放的所有字符值
class Memento{
    //字段，与发起人实体中相同的字段
    private String state;
 
    public Memento(String state) {
        this.state = state;
    }
 
    public String getState() {
        return state;
    }
 
    public void setState(String state) {
        this.state = state;
    }
}
 
//发起人角色
class Originator{
    private String state;
 
    //创建备份录
    public Memento createMemento(){
        //把需要备份的字段都传递到备份类实体中进行备份
        return new Memento(state);
    }
 
    //恢复备份-通过某个备份文件还原当前发起人的数据
    public void restoreMemento(Memento memento){
        //把备份类记录的值还原到发起人类对应的字段中
        this.state = memento.getState();
    }
 
    public String getState() {
        return state;
    }
 
    public void setState(String state) {
        this.state = state;
    }
}
 
//管理者-记录着备份的对象
class Caretaker{
    //使用栈记录备份的记录，栈的特性：先进后出，符合还原操作
    private Stack<Memento> stack = new Stack<Memento>();
 
    //添加备份到栈
    public void push(Memento memento) {
        stack.push(memento);
    }
 
    //还原时，从栈中拿出备份的记录
    public Memento pop(){
        return stack.pop();
    }
}
